# Kernel: spool_avg

# Copyright 2014 Nervana Systems Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


<CONSTANT_MAPPING>
    param_O[0]      : c[0x0][0x140]
    param_O[1]      : c[0x0][0x144]
    param_B[0]      : c[0x0][0x148]
    param_B[1]      : c[0x0][0x14c]
    param_I[0]      : c[0x0][0x150]
    param_I[1]      : c[0x0][0x154]
    param_mode      : c[0x0][0x158]
    param_N         : c[0x0][0x15c]
    param_W         : c[0x0][0x160]
    param_H         : c[0x0][0x164]
    param_D         : c[0x0][0x168]
    param_C         : c[0x0][0x16c]
    param_WN        : c[0x0][0x170]
    param_HWN       : c[0x0][0x174]
    param_DHWN      : c[0x0][0x178]
    param_P         : c[0x0][0x17c]
    param_Q         : c[0x0][0x180]
    param_magic_P   : c[0x0][0x184]
    param_shift_P   : c[0x0][0x188]
    param_QN        : c[0x0][0x18c]
    param_PQN       : c[0x0][0x190]
    param_MPQN      : c[0x0][0x194]
    param_pad_j     : c[0x0][0x198]
    param_pad_d     : c[0x0][0x19c]
    param_pad_h     : c[0x0][0x1a0]
    param_pad_w     : c[0x0][0x1a4]
    param_str_j     : c[0x0][0x1a8]
    param_str_d     : c[0x0][0x1ac]
    param_str_h     : c[0x0][0x1b0]
    param_str_w     : c[0x0][0x1b4]
    param_S         : c[0x0][0x1b8]
    param_RS        : c[0x0][0x1bc]
    param_RST       : c[0x0][0x1c0]
    param_JRST      : c[0x0][0x1c4]
    param_magic_S   : c[0x0][0x1c8]
    param_shift_S   : c[0x0][0x1cc]
    param_magic_RS  : c[0x0][0x1d0]
    param_shift_RS  : c[0x0][0x1d4]
    param_magic_RST : c[0x0][0x1d8]
    param_shift_RST : c[0x0][0x1dc]
    param_overlap   : c[0x0][0x1e0]
</CONSTANT_MAPPING>



<REGISTER_MAPPING>

      0-7 : Out<0-1>, In<0-1>, Back<0-1>, bprop, tid

     8-19 : load0In<0-1>, load1In<0-1>, load2In<0-1>, load3In<0-1>, inOffset<0-3>

    20-46 ~ jrst_<0-3>, load<0-3>, sum, lutOffset, lutSizeRcp

       47 : lutSize

     8-13 ~ m, p, q, k

    14-46 ~ mp, P, Q, iOut

    14-46 ~ j, t, r, s, kj, mt, pr, qs, x, y, z, c, sliceI, lutStore, lutStore2, mask_shr, dep_thd_mask, dep_thd_bits, dep_thd_cnt, jrst, rst, rs, warp_count, RST, RS, S, ballot, warp_slices

</REGISTER_MAPPING>

--:-:1:-:1      S2R tid,  SR_TID.X; // tid==n
--:-:2:-:1      S2R q,  SR_CTAID.X;
--:-:3:-:1      S2R mp, SR_CTAID.Y;
--:-:4:-:1      S2R k,  SR_CTAID.Z;

<SCHEDULE_BLOCK>
01:-:-:-:1      ISETP.GE.AND P6, PT, tid, 32, PT;

// P5 = bprop mode
--:-:-:-:1      ISETP.NE.AND P5, PT, RZ, param_mode, PT;

// m = mp / P
// p = mp % P
--:-:-:-:1      MOV P, param_P;
04:-:-:-:1      XMAD.LO2C m, mp, param_magic_P, RZ;
--:-:-:-:1      SHR.U32 m, m, param_shift_P;
--:-:-:-:1      VMAD.U16.U16 p, -m, P, mp;

--:-:-:-:1      MOV Q, param_Q;
--:-:-:-:1      LOP.AND.NZ P1, RZ, p, 1;
--:-:-:-:1  @P1 IADD3 q, -q, -1, Q;

// I += n
--:-:-:-:1      LEA      In0.CC,   tid, param_I[0],     2;
--:-:-:-:1      LEA.HI.X In1,      tid, param_I[1], RZ, 2;

--:-:-:-:1      LEA      Back0.CC, tid, param_B[0],     2;
--:-:-:-:1      LEA.HI.X Back1,    tid, param_B[1], RZ, 2;

// iOut = k*MPQN + m*PQN + p*QN + q*N + n
02:-:-:-:1      XMAD      iOut, q, param_N,    tid;
--:-:-:-:1      XMAD.LO2C iOut, p, param_QN,   iOut;
--:-:-:-:1      XMAD.LO2C iOut, m, param_PQN,  iOut;
08:-:-:-:1      XMAD.LO2C iOut, k, param_MPQN, iOut;
--:-:-:-:1      LEA      Out0.CC, iOut, param_O[0],     2;
--:-:-:-:1      LEA.HI.X Out1,    iOut, param_O[1], RZ, 2;

--:-:5:-:1  @P5 LDG.E.CI bprop, [Out];
</SCHEDULE_BLOCK>

--:-:-:-:5  @P6 BRA.U END_SETUP;

<SCHEDULE_BLOCK>
--:-:-:-:1      MOV warp_count, 32;
--:-:-:-:1      MOV lutStore2,  RZ;
--:-:-:-:1      MOV lutSize,    RZ;
--:-:-:-:1      MOV jrst,       tid;
--:-:-:-:1      MOV RST,        param_RST;
--:-:-:-:1      MOV RS,         param_RS;
--:-:-:-:1      MOV S,          param_S;
// kj = k * str_j - pad_j
// mt = m * str_d - pad_d
// pr = p * str_h - pad_h
// qs = q * str_w - pad_w
--:-:-:-:1      XMAD qs, q,   param_str_w, RZ;
--:-:-:-:1      XMAD pr, p,   param_str_h, RZ;
--:-:-:-:1      XMAD mt, m,   param_str_d, RZ;
--:-:-:-:1      XMAD kj, k,   param_str_j, RZ;
--:-:-:-:1      IADD qs, qs, -param_pad_w;
--:-:-:-:1      IADD pr, pr, -param_pad_h;
--:-:-:-:1      IADD mt, mt, -param_pad_d;
--:-:-:-:1      IADD kj, kj, -param_pad_j;

--:-:-:-:1      MOV     dep_thd_mask, -1;
--:-:-:-:1      IADD    mask_shr, -tid, 32;
--:-:-:-:1      SHR.U32 dep_thd_mask, dep_thd_mask, mask_shr;
</SCHEDULE_BLOCK>

LUT_LOOP:

<SCHEDULE_BLOCK>
// warp synchronous loop while warp_count < JRST
--:-:-:-:1      ISETP.LT.AND P4, PT, warp_count, param_JRST, PT;
--:-:-:-:1      ISETP.LT.AND P3, PT, jrst, param_JRST, PT;
--:-:-:-:1      IADD warp_count, warp_count, 32;
// j   = jrst / RST
// rst = jrst % RST
--:-:-:-:1      XMAD.LO2C j, jrst, param_magic_RST, RZ;
--:-:-:-:1      SHR.U32   j, j, param_shift_RST;
--:-:-:-:1      VMAD.S16.S16 rst, -j, RST, jrst;
// t =  rst / RS
// rs = rst % RS
--:-:-:-:1      XMAD.LO2C t, rst, param_magic_RS, RZ;
--:-:-:-:1      SHR.U32   t, t, param_shift_RS;
--:-:-:-:1      VMAD.S16.S16 rs, -t, RS, rst;
// r = rs / S
// s = rs % S
--:-:-:-:1      XMAD.LO2C r, rs, param_magic_S, RZ;
--:-:-:-:1      SHR.U32   r, r, param_shift_S;
--:-:-:-:1      VMAD.S16.S16 s, -r, S, rs;
// x = qs + s
// y = pr + r
// z = mt + t
// c = kj + j
--:-:-:-:1      IADD x, qs, s;
--:-:-:-:1      IADD y, pr, r;
--:-:-:-:1      IADD z, mt, t;
--:-:-:-:1      IADD c, kj, j;
--:-:-:-:1      ISETP.GE.AND  P0, PT, x, RZ, PT;
--:-:-:-:1      ISETP.GE.AND  P1, PT, y, RZ, PT;
--:-:-:-:1      ISETP.GE.AND  P2, PT, z, RZ, PT;
--:-:-:-:1      ISETP.GE.AND  P3, PT, c, RZ, P3;
--:-:-:-:1      ISETP.LT.AND  P0, PT, x, param_W, P0;
--:-:-:-:1      ISETP.LT.AND  P1, PT, y, param_H, P1;
--:-:-:-:1      ISETP.LT.AND  P2, PT, z, param_D, P2;
--:-:-:-:1      ISETP.LT.AND  P3, PT, c, param_C, P3;
--:-:-:-:1      PSETP.AND.AND P0, PT, P0, P1, PT;
--:-:-:-:1      PSETP.AND.AND P0, PT, P0, P2, P3;

// sliceI = (c*DHWN + z*HWN + y*WN + x*N) * 4
01:-:-:-:1      XMAD      sliceI, x, param_N,    RZ;
--:-:-:-:1      XMAD.LO2C sliceI, y, param_WN,   sliceI;
--:-:-:-:1      XMAD.LO2C sliceI, z, param_HWN,  sliceI;
--:-:-:-:1      XMAD.LO2C sliceI, c, param_DHWN, sliceI;
--:-:-:-:1      SHL sliceI, sliceI, 2;

<ORDERED>
// Get a mask of all valid slices in the warp
--:-:-:-:1      VOTE.ANY ballot, PT, P0;
// Count the total valid slices
--:-:2:-:1      POPC warp_slices, ballot;
// Prepare lutStore for this and next loop
--:-:-:-:1  @P0 MOV    lutStore, lutStore2;
02:-:-:-:1      ISCADD lutStore2, warp_slices, lutStore2, 2;
// Count all the valid slices below this threadid
--:-:-:-:1  @P0 LOP.AND dep_thd_bits, dep_thd_mask, ballot;
--:-:3:-:1  @P0 POPC dep_thd_cnt, dep_thd_bits;
// use the jrst increment to space the barrier sync
--:-:-:-:1      IADD jrst, jrst, 32;
// Update the lutStore address from this count
04:-:-:-:1  @P0 ISCADD lutStore, dep_thd_cnt, lutStore, 2;
// Store both slice offsets in the lut
--:1:-:-:1  @P0 STS [lutStore + 4x<4>], sliceI;
</ORDERED>
// Keep track of the total size of the lut
--:-:-:-:1      IADD lutSize, lutSize, warp_slices;
</SCHEDULE_BLOCK>

--:-:-:-:5  @P4 BRA.U LUT_LOOP;

// Share the lut size with the other warp
--:1:-:-:2      STS [RZ], lutSize;

END_SETUP:

01:-:-:-:5      BAR.SYNC 0;

--:-:1:-:2      LDS lutSize, [RZ];
01:-:1:-:2      I2F.F32.S32 lutSizeRcp, lutSize;

<SCHEDULE_BLOCK>
--:-:-:-:1      MOV jrst_0, RZ;
--:-:-:-:1      MOV jrst_1, 1;
--:-:-:-:1      MOV jrst_2, 2;
--:-:-:-:1      MOV jrst_3, 3;
--:-:-:-:1      MOV sum, RZ;
--:-:-:-:1      MOV lutOffset, 16;
01:-:6:-:1      MUFU.RCP lutSizeRcp, lutSizeRcp;
--:-:-:-:1      ISETP.LT.AND P0, PT, jrst_0, lutSize, PT;
--:-:-:-:1      ISETP.LT.AND P1, PT, jrst_1, lutSize, PT;
--:-:-:-:1      ISETP.LT.AND P2, PT, jrst_2, lutSize, PT;
--:-:-:-:0      ISETP.LT.AND P3, PT, jrst_3, lutSize, PT;
--:-:-:-:1      ISETP.NE.AND P4, PT, RZ, param_overlap, PT;

</SCHEDULE_BLOCK>

--:-:-:-:5  @P5 BRA.U BPROP;

FPROP_LOOP:

--:-:1:-:2      LDS.U.128 inOffset, [lutOffset];

01:-:-:-:6  @P0 IADD   load0In0.CC, In0, inOffset0;
--:-:-:-:2  @P0 IADD.X load0In1,    In1, RZ;
--:-:1:-:1  @P0 LDG.E.CI load0, [load0In];

--:-:-:-:6  @P1 IADD   load1In0.CC, In0, inOffset1;
--:-:-:-:2  @P1 IADD.X load1In1,    In1, RZ;
--:-:2:-:1  @P1 LDG.E.CI load1, [load1In];

--:-:-:-:6  @P2 IADD   load2In0.CC, In0, inOffset2;
--:-:-:-:2  @P2 IADD.X load2In1,    In1, RZ;
--:-:3:-:1  @P2 LDG.E.CI load2, [load2In];

--:-:-:-:6  @P3 IADD   load3In0.CC, In0, inOffset3;
--:-:-:-:2  @P3 IADD.X load3In1,    In1, RZ;
--:-:4:-:1  @P3 LDG.E.CI load3, [load3In];

--:-:-:-:1      IADD jrst_0, jrst_0, 4;
--:-:-:-:1      IADD jrst_1, jrst_1, 4;
--:-:-:-:1      IADD jrst_2, jrst_2, 4;
--:-:-:-:1      IADD jrst_3, jrst_3, 4;
--:-:-:-:1      IADD lutOffset, lutOffset, 16;

01:-:-:-:1  @P0 FADD sum, sum, load0;
--:-:-:-:5      ISETP.LT.AND P0, PT, jrst_0, lutSize, PT;

02:-:-:-:1  @P1 FADD sum, sum, load1;
--:-:-:-:5      ISETP.LT.AND P1, PT, jrst_1, lutSize, PT;

04:-:-:-:1  @P2 FADD sum, sum, load2;
--:-:-:-:5      ISETP.LT.AND P2, PT, jrst_2, lutSize, PT;

08:-:-:-:1  @P3 FADD sum, sum, load3;
--:-:-:-:7      ISETP.LT.AND P3, PT, jrst_3, lutSize, PT;

--:-:-:-:5  @P0 BRA.U FPROP_LOOP;

20:-:-:-:2      FMUL sum, sum, lutSizeRcp;
--:-:-:-:1      STG.E.CG [Out], sum;
--:-:-:-:5      BRA.U EXIT;

BPROP:

30:-:-:-:0      FMUL bprop, bprop, lutSizeRcp;

--:-:-:-:5  @P4 BRA.U OVERLAP_LOOP;

BPROP_LOOP:

--:-:1:-:2      LDS.U.128 inOffset, [lutOffset];

03:-:-:-:1  @P0 IADD   load0In0.CC, Back0, inOffset0;
--:-:-:-:5  @P0 IADD   jrst_0, jrst_0, 4;
--:-:-:-:2  @P0 IADD.X load0In1,    Back1, RZ;
--:2:-:-:1  @P0 STG.E.CG [load0In], bprop;
--:-:-:-:1      ISETP.LT.AND P0, PT, jrst_0, lutSize, PT;

04:-:-:-:1  @P1 IADD   load1In0.CC, Back0, inOffset1;
--:-:-:-:5  @P1 IADD   jrst_1, jrst_1, 4;
--:-:-:-:2  @P1 IADD.X load1In1,    Back1, RZ;
--:3:-:-:1  @P1 STG.E.CG [load1In], bprop;
--:-:-:-:1      ISETP.LT.AND P1, PT, jrst_1, lutSize, PT;

08:-:-:-:1  @P2 IADD   load2In0.CC, Back0, inOffset2;
--:-:-:-:5  @P2 IADD   jrst_2, jrst_2, 4;
--:-:-:-:2  @P2 IADD.X load2In1,    Back1, RZ;
--:4:-:-:1  @P2 STG.E.CG [load2In], bprop;
--:-:-:-:1      ISETP.LT.AND P2, PT, jrst_2, lutSize, PT;

10:-:-:-:1  @P3 IADD   load3In0.CC, Back0, inOffset3;
--:-:-:-:5  @P3 IADD   jrst_3, jrst_3, 4;
--:-:-:-:2  @P3 IADD.X load3In1,    Back1, RZ;
--:5:-:-:1  @P3 STG.E.CG [load3In], bprop;
--:-:-:-:1      ISETP.LT.AND P3, PT, jrst_3, lutSize, PT;

--:-:-:-:0      IADD lutOffset, lutOffset, 16;

--:-:-:-:5  @P0 BRA.U BPROP_LOOP;

--:-:-:-:5      BRA.U EXIT;

// This code path is no longer used as it's too slow
// Use the hpool_bprop_avg kernel instead
OVERLAP_LOOP:

--:-:1:-:2      LDS.U.128 inOffset, [lutOffset];

03:-:-:-:1  @P0 IADD   load0In0.CC, Back0, inOffset0;
--:-:-:-:5  @P0 IADD   jrst_0, jrst_0, 4;
--:-:-:-:2  @P0 IADD.X load0In1,    Back1, RZ;
--:2:-:-:1  @P0 RED.E.ADD.F32.FTZ.RN [load0In], bprop;
--:-:-:-:1      ISETP.LT.AND P0, PT, jrst_0, lutSize, PT;

04:-:-:-:1  @P1 IADD   load1In0.CC, Back0, inOffset1;
--:-:-:-:5  @P1 IADD   jrst_1, jrst_1, 4;
--:-:-:-:2  @P1 IADD.X load1In1,    Back1, RZ;
--:3:-:-:1  @P1 RED.E.ADD.F32.FTZ.RN [load1In], bprop;
--:-:-:-:1      ISETP.LT.AND P1, PT, jrst_1, lutSize, PT;

08:-:-:-:1  @P2 IADD   load2In0.CC, Back0, inOffset2;
--:-:-:-:5  @P2 IADD   jrst_2, jrst_2, 4;
--:-:-:-:2  @P2 IADD.X load2In1,    Back1, RZ;
--:4:-:-:1  @P2 RED.E.ADD.F32.FTZ.RN [load2In], bprop;
--:-:-:-:1      ISETP.LT.AND P2, PT, jrst_2, lutSize, PT;

10:-:-:-:1  @P3 IADD   load3In0.CC, Back0, inOffset3;
--:-:-:-:5  @P3 IADD   jrst_3, jrst_3, 4;
--:-:-:-:2  @P3 IADD.X load3In1,    Back1, RZ;
--:5:-:-:1  @P3 RED.E.ADD.F32.FTZ.RN [load3In], bprop;
--:-:-:-:1      ISETP.LT.AND P3, PT, jrst_3, lutSize, PT;

--:-:-:-:0      IADD lutOffset, lutOffset, 16;

--:-:-:-:5  @P0 BRA.U OVERLAP_LOOP;

EXIT:

--:-:-:-:5      EXIT;